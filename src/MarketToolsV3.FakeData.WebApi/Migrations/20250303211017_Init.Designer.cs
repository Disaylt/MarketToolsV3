// <auto-generated />
using System;
using MarketToolsV3.FakeData.WebApi.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarketToolsV3.FakeData.WebApi.Migrations
{
    [DbContext(typeof(FakeDataDbContext))]
    [Migration("20250303211017_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.CookieEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Domain")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Path")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Cookies");
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.FakeDataTaskEntity", b =>
                {
                    b.Property<string>("TaskId")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("TaskId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.ResponseBodyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<int>("TaskDetailId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskDetailId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.TaskDetailsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JsonBody")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("NumFailed")
                        .HasColumnType("integer");

                    b.Property<int?>("NumGroup")
                        .HasColumnType("integer");

                    b.Property<int>("NumSuccessful")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfExecutions")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Tag")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TaskCompleteCondition")
                        .HasColumnType("integer");

                    b.Property<int>("TaskEndCondition")
                        .HasColumnType("integer");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TimeoutBeforeRun")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId", "SortIndex")
                        .IsUnique();

                    b.ToTable("TasksDetails");
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.CookieEntity", b =>
                {
                    b.HasOne("MarketToolsV3.FakeData.WebApi.Domain.Entities.FakeDataTaskEntity", "TaskEntity")
                        .WithMany("Cookies")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskEntity");
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.ResponseBodyEntity", b =>
                {
                    b.HasOne("MarketToolsV3.FakeData.WebApi.Domain.Entities.TaskDetailsEntity", "TaskDetail")
                        .WithMany("Responses")
                        .HasForeignKey("TaskDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskDetail");
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.TaskDetailsEntity", b =>
                {
                    b.HasOne("MarketToolsV3.FakeData.WebApi.Domain.Entities.FakeDataTaskEntity", "TaskEntity")
                        .WithMany("Details")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskEntity");
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.FakeDataTaskEntity", b =>
                {
                    b.Navigation("Cookies");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.TaskDetailsEntity", b =>
                {
                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
