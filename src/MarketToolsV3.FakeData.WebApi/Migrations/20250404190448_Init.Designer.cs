// <auto-generated />
using System;
using MarketToolsV3.FakeData.WebApi.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarketToolsV3.FakeData.WebApi.Migrations
{
    [DbContext(typeof(FakeDataDbContext))]
    [Migration("20250404190448_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.CookieEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Domain")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("domain");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("path");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("task_id");

                    b.Property<string>("Value")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_cookies");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_cookies_task_id");

                    b.ToTable("cookies", (string)null);
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.ResponseBodyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Data")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("data");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer")
                        .HasColumnName("status_code");

                    b.Property<int>("TaskDetailId")
                        .HasColumnType("integer")
                        .HasColumnName("task_detail_id");

                    b.HasKey("Id")
                        .HasName("pk_responses");

                    b.HasIndex("TaskDetailId")
                        .HasDatabaseName("ix_responses_task_detail_id");

                    b.ToTable("responses", (string)null);
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.TaskDetailsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("JsonBody")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("json_body");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("method");

                    b.Property<int>("NumFailed")
                        .HasColumnType("integer")
                        .HasColumnName("num_failed");

                    b.Property<int?>("NumGroup")
                        .HasColumnType("integer")
                        .HasColumnName("num_group");

                    b.Property<int>("NumSuccessful")
                        .HasColumnType("integer")
                        .HasColumnName("num_successful");

                    b.Property<int>("NumberOfExecutions")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_executions");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("path");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer")
                        .HasColumnName("sort_index");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Tag")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tag");

                    b.Property<int>("TaskCompleteCondition")
                        .HasColumnType("integer")
                        .HasColumnName("task_complete_condition");

                    b.Property<int>("TaskEndCondition")
                        .HasColumnType("integer")
                        .HasColumnName("task_end_condition");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("task_id");

                    b.Property<int>("TimeoutBeforeRun")
                        .HasColumnType("integer")
                        .HasColumnName("timeout_before_run");

                    b.HasKey("Id")
                        .HasName("pk_tasks_details");

                    b.HasIndex("TaskId", "SortIndex")
                        .IsUnique()
                        .HasDatabaseName("ix_tasks_details_task_id_sort_index");

                    b.ToTable("tasks_details", (string)null);
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.TaskEntity", b =>
                {
                    b.Property<string>("TaskId")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("task_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.HasKey("TaskId")
                        .HasName("pk_tasks");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.CookieEntity", b =>
                {
                    b.HasOne("MarketToolsV3.FakeData.WebApi.Domain.Entities.TaskEntity", "TaskEntity")
                        .WithMany("Cookies")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cookies_tasks_task_id");

                    b.Navigation("TaskEntity");
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.ResponseBodyEntity", b =>
                {
                    b.HasOne("MarketToolsV3.FakeData.WebApi.Domain.Entities.TaskDetailsEntity", "TaskDetail")
                        .WithMany("Responses")
                        .HasForeignKey("TaskDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_responses_tasks_details_task_detail_id");

                    b.Navigation("TaskDetail");
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.TaskDetailsEntity", b =>
                {
                    b.HasOne("MarketToolsV3.FakeData.WebApi.Domain.Entities.TaskEntity", "TaskEntity")
                        .WithMany("Details")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_details_tasks_task_id");

                    b.Navigation("TaskEntity");
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.TaskDetailsEntity", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("MarketToolsV3.FakeData.WebApi.Domain.Entities.TaskEntity", b =>
                {
                    b.Navigation("Cookies");

                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
